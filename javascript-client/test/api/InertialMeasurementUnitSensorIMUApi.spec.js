/**
 * Sense HAT API
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SenseHatApi);
  }
}(this, function(expect, SenseHatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SenseHatApi.InertialMeasurementUnitSensorIMUApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InertialMeasurementUnitSensorIMUApi', function() {
    describe('iMUSensorsGetAccelerometerGet', function() {
      it('should call iMUSensorsGetAccelerometerGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetAccelerometerGet
        //instance.iMUSensorsGetAccelerometerGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsGetAccelerometerRawGet', function() {
      it('should call iMUSensorsGetAccelerometerRawGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetAccelerometerRawGet
        //instance.iMUSensorsGetAccelerometerRawGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsGetCompassGet', function() {
      it('should call iMUSensorsGetCompassGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetCompassGet
        //instance.iMUSensorsGetCompassGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsGetCompassRawGet', function() {
      it('should call iMUSensorsGetCompassRawGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetCompassRawGet
        //instance.iMUSensorsGetCompassRawGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsGetGyroscopeGet', function() {
      it('should call iMUSensorsGetGyroscopeGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetGyroscopeGet
        //instance.iMUSensorsGetGyroscopeGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsGetGyroscopeRawGet', function() {
      it('should call iMUSensorsGetGyroscopeRawGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetGyroscopeRawGet
        //instance.iMUSensorsGetGyroscopeRawGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsGetOrientationDegreesGet', function() {
      it('should call iMUSensorsGetOrientationDegreesGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetOrientationDegreesGet
        //instance.iMUSensorsGetOrientationDegreesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsGetOrientationGet', function() {
      it('should call iMUSensorsGetOrientationGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetOrientationGet
        //instance.iMUSensorsGetOrientationGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsGetOrientationRadiansGet', function() {
      it('should call iMUSensorsGetOrientationRadiansGet successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsGetOrientationRadiansGet
        //instance.iMUSensorsGetOrientationRadiansGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('iMUSensorsSetImuConfigPut', function() {
      it('should call iMUSensorsSetImuConfigPut successfully', function(done) {
        //uncomment below and update the code to test iMUSensorsSetImuConfigPut
        //instance.iMUSensorsSetImuConfigPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
