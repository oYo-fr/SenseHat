/**
 * Sense HAT API
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Orientation', 'model/Vertice'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Orientation'), require('../model/Vertice'));
  } else {
    // Browser globals (root is window)
    if (!root.SenseHatApi) {
      root.SenseHatApi = {};
    }
    root.SenseHatApi.InertialMeasurementUnitSensorIMUApi = factory(root.SenseHatApi.ApiClient, root.SenseHatApi.Error, root.SenseHatApi.Orientation, root.SenseHatApi.Vertice);
  }
}(this, function(ApiClient, Error, Orientation, Vertice) {
  'use strict';

  /**
   * InertialMeasurementUnitSensorIMU service.
   * @module api/InertialMeasurementUnitSensorIMUApi
   * @version 1.0.0
   */

  /**
   * Constructs a new InertialMeasurementUnitSensorIMUApi. 
   * @alias module:api/InertialMeasurementUnitSensorIMUApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the iMUSensorsGetAccelerometerGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetAccelerometerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Orientation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetAccelerometerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Orientation}
     */
    this.iMUSensorsGetAccelerometerGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Orientation;

      return this.apiClient.callApi(
        '/IMU_sensors/get_accelerometer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsGetAccelerometerRawGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetAccelerometerRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vertice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the raw x, y and z axis accelerometer data. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetAccelerometerRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vertice}
     */
    this.iMUSensorsGetAccelerometerRawGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vertice;

      return this.apiClient.callApi(
        '/IMU_sensors/get_accelerometer_raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsGetCompassGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetCompassGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetCompassGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.iMUSensorsGetCompassGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/IMU_sensors/get_compass', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsGetCompassRawGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetCompassRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vertice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the raw x, y and z axis magnetometer data. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetCompassRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vertice}
     */
    this.iMUSensorsGetCompassRawGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vertice;

      return this.apiClient.callApi(
        '/IMU_sensors/get_compass_raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsGetGyroscopeGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetGyroscopeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Orientation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetGyroscopeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Orientation}
     */
    this.iMUSensorsGetGyroscopeGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Orientation;

      return this.apiClient.callApi(
        '/IMU_sensors/get_gyroscope', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsGetGyroscopeRawGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetGyroscopeRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vertice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the raw x, y and z axis gyroscope data. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetGyroscopeRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vertice}
     */
    this.iMUSensorsGetGyroscopeRawGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vertice;

      return this.apiClient.callApi(
        '/IMU_sensors/get_gyroscope_raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsGetOrientationDegreesGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetOrientationDegreesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Orientation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetOrientationDegreesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Orientation}
     */
    this.iMUSensorsGetOrientationDegreesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Orientation;

      return this.apiClient.callApi(
        '/IMU_sensors/get_orientation_degrees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsGetOrientationGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetOrientationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Orientation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls get_orientation_degrees above. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetOrientationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Orientation}
     */
    this.iMUSensorsGetOrientationGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Orientation;

      return this.apiClient.callApi(
        '/IMU_sensors/get_orientation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsGetOrientationRadiansGet operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetOrientationRadiansGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Orientation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw. 
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsGetOrientationRadiansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Orientation}
     */
    this.iMUSensorsGetOrientationRadiansGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Orientation;

      return this.apiClient.callApi(
        '/IMU_sensors/get_orientation_radians', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the iMUSensorsSetImuConfigPut operation.
     * @callback module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsSetImuConfigPutCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below. 
     * @param {Boolean} compassEnabled Whether or not the compass should be enabled.
     * @param {Boolean} gyroEnabled Whether or not the gyroscope should be enabled.
     * @param {Boolean} accelEnabled Whether or not the accelerometer should be enabled.
     * @param {module:api/InertialMeasurementUnitSensorIMUApi~iMUSensorsSetImuConfigPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.iMUSensorsSetImuConfigPut = function(compassEnabled, gyroEnabled, accelEnabled, callback) {
      var postBody = null;

      // verify the required parameter 'compassEnabled' is set
      if (compassEnabled == undefined || compassEnabled == null) {
        throw new Error("Missing the required parameter 'compassEnabled' when calling iMUSensorsSetImuConfigPut");
      }

      // verify the required parameter 'gyroEnabled' is set
      if (gyroEnabled == undefined || gyroEnabled == null) {
        throw new Error("Missing the required parameter 'gyroEnabled' when calling iMUSensorsSetImuConfigPut");
      }

      // verify the required parameter 'accelEnabled' is set
      if (accelEnabled == undefined || accelEnabled == null) {
        throw new Error("Missing the required parameter 'accelEnabled' when calling iMUSensorsSetImuConfigPut");
      }


      var pathParams = {
      };
      var queryParams = {
        'compass_enabled': compassEnabled,
        'gyro_enabled': gyroEnabled,
        'accel_enabled': accelEnabled
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/IMU_sensors/set_imu_config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
