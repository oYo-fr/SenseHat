/**
 * Sense HAT API
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Colour', 'model/Error', 'model/Pixel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Colour'), require('../model/Error'), require('../model/Pixel'));
  } else {
    // Browser globals (root is window)
    if (!root.SenseHatApi) {
      root.SenseHatApi = {};
    }
    root.SenseHatApi.LEDApi = factory(root.SenseHatApi.ApiClient, root.SenseHatApi.Colour, root.SenseHatApi.Error, root.SenseHatApi.Pixel);
  }
}(this, function(ApiClient, Colour, Error, Pixel) {
  'use strict';

  /**
   * LED service.
   * @module api/LEDApi
   * @version 1.0.0
   */

  /**
   * Constructs a new LEDApi. 
   * @alias module:api/LEDApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the lEDMatrixClearPut operation.
     * @callback module:api/LEDApi~lEDMatrixClearPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the entire LED matrix to a single colour, defaults to blank / off. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Colour} opts.colour An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0).
     * @param {module:api/LEDApi~lEDMatrixClearPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lEDMatrixClearPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['colour'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LED_Matrix/clear', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixFlipHPut operation.
     * @callback module:api/LEDApi~lEDMatrixFlipHPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Colour>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flips the image on the LED matrix horizontally. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.redraw Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (default to true)
     * @param {module:api/LEDApi~lEDMatrixFlipHPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Colour>}
     */
    this.lEDMatrixFlipHPut = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'redraw': opts['redraw']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Colour];

      return this.apiClient.callApi(
        '/LED_Matrix/flip_h', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixFlipVPut operation.
     * @callback module:api/LEDApi~lEDMatrixFlipVPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Colour>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flips the image on the LED matrix vertically. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.redraw Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (default to true)
     * @param {module:api/LEDApi~lEDMatrixFlipVPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Colour>}
     */
    this.lEDMatrixFlipVPut = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'redraw': opts['redraw']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Colour];

      return this.apiClient.callApi(
        '/LED_Matrix/flip_v', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixGetPixelGet operation.
     * @callback module:api/LEDApi~lEDMatrixGetPixelGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Colour} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an individual LED matrix pixel at the specified X-Y coordinate. 
     * @param {Number} x 0 is on the left, 7 on the right.
     * @param {Number} y 0 is at the top, 7 at the bottom.
     * @param {module:api/LEDApi~lEDMatrixGetPixelGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Colour}
     */
    this.lEDMatrixGetPixelGet = function(x, y, callback) {
      var postBody = null;

      // verify the required parameter 'x' is set
      if (x == undefined || x == null) {
        throw new Error("Missing the required parameter 'x' when calling lEDMatrixGetPixelGet");
      }

      // verify the required parameter 'y' is set
      if (y == undefined || y == null) {
        throw new Error("Missing the required parameter 'y' when calling lEDMatrixGetPixelGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'x': x,
        'y': y
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Colour;

      return this.apiClient.callApi(
        '/LED_Matrix/get_pixel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixGetPixelsGet operation.
     * @callback module:api/LEDApi~lEDMatrixGetPixelsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Colour>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels. 
     * @param {module:api/LEDApi~lEDMatrixGetPixelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Colour>}
     */
    this.lEDMatrixGetPixelsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Colour];

      return this.apiClient.callApi(
        '/LED_Matrix/get_pixels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixLowLightPut operation.
     * @callback module:api/LEDApi~lEDMatrixLowLightPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment. 
     * @param {Boolean} value Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.
     * @param {module:api/LEDApi~lEDMatrixLowLightPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lEDMatrixLowLightPut = function(value, callback) {
      var postBody = null;

      // verify the required parameter 'value' is set
      if (value == undefined || value == null) {
        throw new Error("Missing the required parameter 'value' when calling lEDMatrixLowLightPut");
      }


      var pathParams = {
      };
      var queryParams = {
        'value': value
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LED_Matrix/low_light', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixSetPixelPut operation.
     * @callback module:api/LEDApi~lEDMatrixSetPixelPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour. 
     * @param {module:model/Pixel} pixel A pixel.
     * @param {module:api/LEDApi~lEDMatrixSetPixelPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lEDMatrixSetPixelPut = function(pixel, callback) {
      var postBody = pixel;

      // verify the required parameter 'pixel' is set
      if (pixel == undefined || pixel == null) {
        throw new Error("Missing the required parameter 'pixel' when calling lEDMatrixSetPixelPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LED_Matrix/set_pixel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixSetPixelsPut operation.
     * @callback module:api/LEDApi~lEDMatrixSetPixelsPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Pixel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the entire LED matrix based on a 64 length list of pixel values. 
     * @param {Array.<module:model/Pixel>} pixelList A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.
     * @param {module:api/LEDApi~lEDMatrixSetPixelsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Pixel>}
     */
    this.lEDMatrixSetPixelsPut = function(pixelList, callback) {
      var postBody = pixelList;

      // verify the required parameter 'pixelList' is set
      if (pixelList == undefined || pixelList == null) {
        throw new Error("Missing the required parameter 'pixelList' when calling lEDMatrixSetPixelsPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Pixel];

      return this.apiClient.callApi(
        '/LED_Matrix/set_pixels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixSetRotationPut operation.
     * @callback module:api/LEDApi~lEDMatrixSetRotationPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown. 
     * @param {Number} r The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.redraw Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (default to true)
     * @param {module:api/LEDApi~lEDMatrixSetRotationPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lEDMatrixSetRotationPut = function(r, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'r' is set
      if (r == undefined || r == null) {
        throw new Error("Missing the required parameter 'r' when calling lEDMatrixSetRotationPut");
      }


      var pathParams = {
      };
      var queryParams = {
        'r': r,
        'redraw': opts['redraw']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LED_Matrix/set_rotation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixShowLetterPut operation.
     * @callback module:api/LEDApi~lEDMatrixShowLetterPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a single text character on the LED matrix. 
     * @param {String} s The letter to show.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Colour>} opts.colours An array of 2 colours (text colour and background colour).
     * @param {module:api/LEDApi~lEDMatrixShowLetterPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lEDMatrixShowLetterPut = function(s, opts, callback) {
      opts = opts || {};
      var postBody = opts['colours'];

      // verify the required parameter 's' is set
      if (s == undefined || s == null) {
        throw new Error("Missing the required parameter 's' when calling lEDMatrixShowLetterPut");
      }


      var pathParams = {
      };
      var queryParams = {
        's': s
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LED_Matrix/show_letter', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lEDMatrixShowMessagePut operation.
     * @callback module:api/LEDApi~lEDMatrixShowMessagePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour. 
     * @param {String} textString The message to scroll.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.scrollSpeed The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (default to 0.1)
     * @param {Array.<module:model/Colour>} opts.colours An array of 2 colours (text colour and background colour).
     * @param {module:api/LEDApi~lEDMatrixShowMessagePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lEDMatrixShowMessagePut = function(textString, opts, callback) {
      opts = opts || {};
      var postBody = opts['colours'];

      // verify the required parameter 'textString' is set
      if (textString == undefined || textString == null) {
        throw new Error("Missing the required parameter 'textString' when calling lEDMatrixShowMessagePut");
      }


      var pathParams = {
      };
      var queryParams = {
        'text_string': textString,
        'scroll_speed': opts['scrollSpeed']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LED_Matrix/show_message', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
