/**
 * Sense HAT API
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.SenseHatApi) {
      root.SenseHatApi = {};
    }
    root.SenseHatApi.EnvironmentalSensorApi = factory(root.SenseHatApi.ApiClient, root.SenseHatApi.Error);
  }
}(this, function(ApiClient, Error) {
  'use strict';

  /**
   * EnvironmentalSensor service.
   * @module api/EnvironmentalSensorApi
   * @version 1.0.0
   */

  /**
   * Constructs a new EnvironmentalSensorApi. 
   * @alias module:api/EnvironmentalSensorApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the environmentalSensorsGetHumidityGet operation.
     * @callback module:api/EnvironmentalSensorApi~environmentalSensorsGetHumidityGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the percentage of relative humidity from the humidity sensor. 
     * @param {module:api/EnvironmentalSensorApi~environmentalSensorsGetHumidityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.environmentalSensorsGetHumidityGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/Environmental_sensors/get_humidity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentalSensorsGetPressureGet operation.
     * @callback module:api/EnvironmentalSensorApi~environmentalSensorsGetPressureGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current pressure in Millibars from the pressure sensor. 
     * @param {module:api/EnvironmentalSensorApi~environmentalSensorsGetPressureGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.environmentalSensorsGetPressureGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/Environmental_sensors/get_pressure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentalSensorsGetTemperatureFromHumidityGet operation.
     * @callback module:api/EnvironmentalSensorApi~environmentalSensorsGetTemperatureFromHumidityGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current temperature in degrees Celsius from the humidity sensor. 
     * @param {module:api/EnvironmentalSensorApi~environmentalSensorsGetTemperatureFromHumidityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.environmentalSensorsGetTemperatureFromHumidityGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/Environmental_sensors/get_temperature_from_humidity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentalSensorsGetTemperatureFromPressureGet operation.
     * @callback module:api/EnvironmentalSensorApi~environmentalSensorsGetTemperatureFromPressureGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current temperature in degrees Celsius from the pressure sensor. 
     * @param {module:api/EnvironmentalSensorApi~environmentalSensorsGetTemperatureFromPressureGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.environmentalSensorsGetTemperatureFromPressureGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/Environmental_sensors/get_temperature_from_pressure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentalSensorsGetTemperatureGet operation.
     * @callback module:api/EnvironmentalSensorApi~environmentalSensorsGetTemperatureGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls get_temperature_from_humidity below. 
     * @param {module:api/EnvironmentalSensorApi~environmentalSensorsGetTemperatureGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.environmentalSensorsGetTemperatureGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/Environmental_sensors/get_temperature', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
