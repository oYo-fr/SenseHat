/**
 * Sense HAT API
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Colour', 'model/Error', 'model/Orientation', 'model/Pixel', 'model/Vertice', 'api/EnvironmentalSensorApi', 'api/InertialMeasurementUnitSensorIMUApi', 'api/LEDApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Colour'), require('./model/Error'), require('./model/Orientation'), require('./model/Pixel'), require('./model/Vertice'), require('./api/EnvironmentalSensorApi'), require('./api/InertialMeasurementUnitSensorIMUApi'), require('./api/LEDApi'));
  }
}(function(ApiClient, Colour, Error, Orientation, Pixel, Vertice, EnvironmentalSensorApi, InertialMeasurementUnitSensorIMUApi, LEDApi) {
  'use strict';

  /**
   * Sense_HAT_API_Express_wrapper__httppythonhosted_orgsense_hatapisense_hat_api_reference_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SenseHatApi = require('index'); // See note below*.
   * var xxxSvc = new SenseHatApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SenseHatApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SenseHatApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SenseHatApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Colour model constructor.
     * @property {module:model/Colour}
     */
    Colour: Colour,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Orientation model constructor.
     * @property {module:model/Orientation}
     */
    Orientation: Orientation,
    /**
     * The Pixel model constructor.
     * @property {module:model/Pixel}
     */
    Pixel: Pixel,
    /**
     * The Vertice model constructor.
     * @property {module:model/Vertice}
     */
    Vertice: Vertice,
    /**
     * The EnvironmentalSensorApi service constructor.
     * @property {module:api/EnvironmentalSensorApi}
     */
    EnvironmentalSensorApi: EnvironmentalSensorApi,
    /**
     * The InertialMeasurementUnitSensorIMUApi service constructor.
     * @property {module:api/InertialMeasurementUnitSensorIMUApi}
     */
    InertialMeasurementUnitSensorIMUApi: InertialMeasurementUnitSensorIMUApi,
    /**
     * The LEDApi service constructor.
     * @property {module:api/LEDApi}
     */
    LEDApi: LEDApi
  };

  return exports;
}));
