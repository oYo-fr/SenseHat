/* 
 * Sense HAT API
 *
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInertialMeasurementUnitSensorIMUApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        Orientation IMUSensorsGetAccelerometerGet ();

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        ApiResponse<Orientation> IMUSensorsGetAccelerometerGetWithHttpInfo ();
        /// <summary>
        /// Gets the raw x, y and z axis accelerometer data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Vertice</returns>
        Vertice IMUSensorsGetAccelerometerRawGet ();

        /// <summary>
        /// Gets the raw x, y and z axis accelerometer data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Vertice</returns>
        ApiResponse<Vertice> IMUSensorsGetAccelerometerRawGetWithHttpInfo ();
        /// <summary>
        /// Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>decimal?</returns>
        decimal? IMUSensorsGetCompassGet ();

        /// <summary>
        /// Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of decimal?</returns>
        ApiResponse<decimal?> IMUSensorsGetCompassGetWithHttpInfo ();
        /// <summary>
        /// Gets the raw x, y and z axis magnetometer data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Vertice</returns>
        Vertice IMUSensorsGetCompassRawGet ();

        /// <summary>
        /// Gets the raw x, y and z axis magnetometer data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Vertice</returns>
        ApiResponse<Vertice> IMUSensorsGetCompassRawGetWithHttpInfo ();
        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        Orientation IMUSensorsGetGyroscopeGet ();

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        ApiResponse<Orientation> IMUSensorsGetGyroscopeGetWithHttpInfo ();
        /// <summary>
        /// Gets the raw x, y and z axis gyroscope data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Vertice</returns>
        Vertice IMUSensorsGetGyroscopeRawGet ();

        /// <summary>
        /// Gets the raw x, y and z axis gyroscope data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Vertice</returns>
        ApiResponse<Vertice> IMUSensorsGetGyroscopeRawGetWithHttpInfo ();
        /// <summary>
        /// Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        Orientation IMUSensorsGetOrientationDegreesGet ();

        /// <summary>
        /// Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        ApiResponse<Orientation> IMUSensorsGetOrientationDegreesGetWithHttpInfo ();
        /// <summary>
        /// Calls get_orientation_degrees above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        Orientation IMUSensorsGetOrientationGet ();

        /// <summary>
        /// Calls get_orientation_degrees above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        ApiResponse<Orientation> IMUSensorsGetOrientationGetWithHttpInfo ();
        /// <summary>
        /// Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        Orientation IMUSensorsGetOrientationRadiansGet ();

        /// <summary>
        /// Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        ApiResponse<Orientation> IMUSensorsGetOrientationRadiansGetWithHttpInfo ();
        /// <summary>
        /// Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compassEnabled">Whether or not the compass should be enabled.</param>
        /// <param name="gyroEnabled">Whether or not the gyroscope should be enabled.</param>
        /// <param name="accelEnabled">Whether or not the accelerometer should be enabled.</param>
        /// <returns>decimal?</returns>
        decimal? IMUSensorsSetImuConfigPut (bool? compassEnabled, bool? gyroEnabled, bool? accelEnabled);

        /// <summary>
        /// Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compassEnabled">Whether or not the compass should be enabled.</param>
        /// <param name="gyroEnabled">Whether or not the gyroscope should be enabled.</param>
        /// <param name="accelEnabled">Whether or not the accelerometer should be enabled.</param>
        /// <returns>ApiResponse of decimal?</returns>
        ApiResponse<decimal?> IMUSensorsSetImuConfigPutWithHttpInfo (bool? compassEnabled, bool? gyroEnabled, bool? accelEnabled);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        System.Threading.Tasks.Task<Orientation> IMUSensorsGetAccelerometerGetAsync ();

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetAccelerometerGetAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the raw x, y and z axis accelerometer data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Vertice</returns>
        System.Threading.Tasks.Task<Vertice> IMUSensorsGetAccelerometerRawGetAsync ();

        /// <summary>
        /// Gets the raw x, y and z axis accelerometer data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Vertice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vertice>> IMUSensorsGetAccelerometerRawGetAsyncWithHttpInfo ();
        /// <summary>
        /// Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of decimal?</returns>
        System.Threading.Tasks.Task<decimal?> IMUSensorsGetCompassGetAsync ();

        /// <summary>
        /// Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal?>> IMUSensorsGetCompassGetAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the raw x, y and z axis magnetometer data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Vertice</returns>
        System.Threading.Tasks.Task<Vertice> IMUSensorsGetCompassRawGetAsync ();

        /// <summary>
        /// Gets the raw x, y and z axis magnetometer data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Vertice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vertice>> IMUSensorsGetCompassRawGetAsyncWithHttpInfo ();
        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        System.Threading.Tasks.Task<Orientation> IMUSensorsGetGyroscopeGetAsync ();

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetGyroscopeGetAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the raw x, y and z axis gyroscope data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Vertice</returns>
        System.Threading.Tasks.Task<Vertice> IMUSensorsGetGyroscopeRawGetAsync ();

        /// <summary>
        /// Gets the raw x, y and z axis gyroscope data. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Vertice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vertice>> IMUSensorsGetGyroscopeRawGetAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        System.Threading.Tasks.Task<Orientation> IMUSensorsGetOrientationDegreesGetAsync ();

        /// <summary>
        /// Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetOrientationDegreesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Calls get_orientation_degrees above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        System.Threading.Tasks.Task<Orientation> IMUSensorsGetOrientationGetAsync ();

        /// <summary>
        /// Calls get_orientation_degrees above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetOrientationGetAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        System.Threading.Tasks.Task<Orientation> IMUSensorsGetOrientationRadiansGetAsync ();

        /// <summary>
        /// Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetOrientationRadiansGetAsyncWithHttpInfo ();
        /// <summary>
        /// Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compassEnabled">Whether or not the compass should be enabled.</param>
        /// <param name="gyroEnabled">Whether or not the gyroscope should be enabled.</param>
        /// <param name="accelEnabled">Whether or not the accelerometer should be enabled.</param>
        /// <returns>Task of decimal?</returns>
        System.Threading.Tasks.Task<decimal?> IMUSensorsSetImuConfigPutAsync (bool? compassEnabled, bool? gyroEnabled, bool? accelEnabled);

        /// <summary>
        /// Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compassEnabled">Whether or not the compass should be enabled.</param>
        /// <param name="gyroEnabled">Whether or not the gyroscope should be enabled.</param>
        /// <param name="accelEnabled">Whether or not the accelerometer should be enabled.</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal?>> IMUSensorsSetImuConfigPutAsyncWithHttpInfo (bool? compassEnabled, bool? gyroEnabled, bool? accelEnabled);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InertialMeasurementUnitSensorIMUApi : IInertialMeasurementUnitSensorIMUApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InertialMeasurementUnitSensorIMUApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InertialMeasurementUnitSensorIMUApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InertialMeasurementUnitSensorIMUApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InertialMeasurementUnitSensorIMUApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        public Orientation IMUSensorsGetAccelerometerGet ()
        {
             ApiResponse<Orientation> localVarResponse = IMUSensorsGetAccelerometerGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        public ApiResponse< Orientation > IMUSensorsGetAccelerometerGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_accelerometer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetAccelerometerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        public async System.Threading.Tasks.Task<Orientation> IMUSensorsGetAccelerometerGetAsync ()
        {
             ApiResponse<Orientation> localVarResponse = await IMUSensorsGetAccelerometerGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and gyroscope then gets the current orientation from the accelerometer only.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetAccelerometerGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_accelerometer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetAccelerometerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Gets the raw x, y and z axis accelerometer data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Vertice</returns>
        public Vertice IMUSensorsGetAccelerometerRawGet ()
        {
             ApiResponse<Vertice> localVarResponse = IMUSensorsGetAccelerometerRawGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the raw x, y and z axis accelerometer data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Vertice</returns>
        public ApiResponse< Vertice > IMUSensorsGetAccelerometerRawGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_accelerometer_raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetAccelerometerRawGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vertice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vertice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vertice)));
            
        }

        /// <summary>
        /// Gets the raw x, y and z axis accelerometer data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Vertice</returns>
        public async System.Threading.Tasks.Task<Vertice> IMUSensorsGetAccelerometerRawGetAsync ()
        {
             ApiResponse<Vertice> localVarResponse = await IMUSensorsGetAccelerometerRawGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the raw x, y and z axis accelerometer data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Vertice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vertice>> IMUSensorsGetAccelerometerRawGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_accelerometer_raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetAccelerometerRawGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vertice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vertice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vertice)));
            
        }

        /// <summary>
        /// Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>decimal?</returns>
        public decimal? IMUSensorsGetCompassGet ()
        {
             ApiResponse<decimal?> localVarResponse = IMUSensorsGetCompassGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of decimal?</returns>
        public ApiResponse< decimal? > IMUSensorsGetCompassGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_compass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetCompassGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (decimal?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
            
        }

        /// <summary>
        /// Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of decimal?</returns>
        public async System.Threading.Tasks.Task<decimal?> IMUSensorsGetCompassGetAsync ()
        {
             ApiResponse<decimal?> localVarResponse = await IMUSensorsGetCompassGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calls set_imu_config to disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal?>> IMUSensorsGetCompassGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_compass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetCompassGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (decimal?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
            
        }

        /// <summary>
        /// Gets the raw x, y and z axis magnetometer data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Vertice</returns>
        public Vertice IMUSensorsGetCompassRawGet ()
        {
             ApiResponse<Vertice> localVarResponse = IMUSensorsGetCompassRawGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the raw x, y and z axis magnetometer data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Vertice</returns>
        public ApiResponse< Vertice > IMUSensorsGetCompassRawGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_compass_raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetCompassRawGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vertice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vertice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vertice)));
            
        }

        /// <summary>
        /// Gets the raw x, y and z axis magnetometer data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Vertice</returns>
        public async System.Threading.Tasks.Task<Vertice> IMUSensorsGetCompassRawGetAsync ()
        {
             ApiResponse<Vertice> localVarResponse = await IMUSensorsGetCompassRawGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the raw x, y and z axis magnetometer data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Vertice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vertice>> IMUSensorsGetCompassRawGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_compass_raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetCompassRawGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vertice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vertice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vertice)));
            
        }

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        public Orientation IMUSensorsGetGyroscopeGet ()
        {
             ApiResponse<Orientation> localVarResponse = IMUSensorsGetGyroscopeGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        public ApiResponse< Orientation > IMUSensorsGetGyroscopeGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_gyroscope";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetGyroscopeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        public async System.Threading.Tasks.Task<Orientation> IMUSensorsGetGyroscopeGetAsync ()
        {
             ApiResponse<Orientation> localVarResponse = await IMUSensorsGetGyroscopeGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calls set_imu_config to disable the magnetometer and accelerometer then gets the current orientation from the gyroscope only.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetGyroscopeGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_gyroscope";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetGyroscopeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Gets the raw x, y and z axis gyroscope data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Vertice</returns>
        public Vertice IMUSensorsGetGyroscopeRawGet ()
        {
             ApiResponse<Vertice> localVarResponse = IMUSensorsGetGyroscopeRawGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the raw x, y and z axis gyroscope data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Vertice</returns>
        public ApiResponse< Vertice > IMUSensorsGetGyroscopeRawGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_gyroscope_raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetGyroscopeRawGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vertice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vertice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vertice)));
            
        }

        /// <summary>
        /// Gets the raw x, y and z axis gyroscope data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Vertice</returns>
        public async System.Threading.Tasks.Task<Vertice> IMUSensorsGetGyroscopeRawGetAsync ()
        {
             ApiResponse<Vertice> localVarResponse = await IMUSensorsGetGyroscopeRawGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the raw x, y and z axis gyroscope data.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Vertice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vertice>> IMUSensorsGetGyroscopeRawGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_gyroscope_raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetGyroscopeRawGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vertice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vertice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vertice)));
            
        }

        /// <summary>
        /// Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        public Orientation IMUSensorsGetOrientationDegreesGet ()
        {
             ApiResponse<Orientation> localVarResponse = IMUSensorsGetOrientationDegreesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        public ApiResponse< Orientation > IMUSensorsGetOrientationDegreesGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_orientation_degrees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetOrientationDegreesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        public async System.Threading.Tasks.Task<Orientation> IMUSensorsGetOrientationDegreesGetAsync ()
        {
             ApiResponse<Orientation> localVarResponse = await IMUSensorsGetOrientationDegreesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetOrientationDegreesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_orientation_degrees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetOrientationDegreesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Calls get_orientation_degrees above.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        public Orientation IMUSensorsGetOrientationGet ()
        {
             ApiResponse<Orientation> localVarResponse = IMUSensorsGetOrientationGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calls get_orientation_degrees above.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        public ApiResponse< Orientation > IMUSensorsGetOrientationGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_orientation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetOrientationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Calls get_orientation_degrees above.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        public async System.Threading.Tasks.Task<Orientation> IMUSensorsGetOrientationGetAsync ()
        {
             ApiResponse<Orientation> localVarResponse = await IMUSensorsGetOrientationGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calls get_orientation_degrees above.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetOrientationGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_orientation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetOrientationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Orientation</returns>
        public Orientation IMUSensorsGetOrientationRadiansGet ()
        {
             ApiResponse<Orientation> localVarResponse = IMUSensorsGetOrientationRadiansGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Orientation</returns>
        public ApiResponse< Orientation > IMUSensorsGetOrientationRadiansGetWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_orientation_radians";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetOrientationRadiansGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Orientation</returns>
        public async System.Threading.Tasks.Task<Orientation> IMUSensorsGetOrientationRadiansGetAsync ()
        {
             ApiResponse<Orientation> localVarResponse = await IMUSensorsGetOrientationRadiansGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Orientation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Orientation>> IMUSensorsGetOrientationRadiansGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/IMU_sensors/get_orientation_radians";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsGetOrientationRadiansGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orientation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orientation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orientation)));
            
        }

        /// <summary>
        /// Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compassEnabled">Whether or not the compass should be enabled.</param>
        /// <param name="gyroEnabled">Whether or not the gyroscope should be enabled.</param>
        /// <param name="accelEnabled">Whether or not the accelerometer should be enabled.</param>
        /// <returns>decimal?</returns>
        public decimal? IMUSensorsSetImuConfigPut (bool? compassEnabled, bool? gyroEnabled, bool? accelEnabled)
        {
             ApiResponse<decimal?> localVarResponse = IMUSensorsSetImuConfigPutWithHttpInfo(compassEnabled, gyroEnabled, accelEnabled);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compassEnabled">Whether or not the compass should be enabled.</param>
        /// <param name="gyroEnabled">Whether or not the gyroscope should be enabled.</param>
        /// <param name="accelEnabled">Whether or not the accelerometer should be enabled.</param>
        /// <returns>ApiResponse of decimal?</returns>
        public ApiResponse< decimal? > IMUSensorsSetImuConfigPutWithHttpInfo (bool? compassEnabled, bool? gyroEnabled, bool? accelEnabled)
        {
            // verify the required parameter 'compassEnabled' is set
            if (compassEnabled == null)
                throw new ApiException(400, "Missing required parameter 'compassEnabled' when calling InertialMeasurementUnitSensorIMUApi->IMUSensorsSetImuConfigPut");
            // verify the required parameter 'gyroEnabled' is set
            if (gyroEnabled == null)
                throw new ApiException(400, "Missing required parameter 'gyroEnabled' when calling InertialMeasurementUnitSensorIMUApi->IMUSensorsSetImuConfigPut");
            // verify the required parameter 'accelEnabled' is set
            if (accelEnabled == null)
                throw new ApiException(400, "Missing required parameter 'accelEnabled' when calling InertialMeasurementUnitSensorIMUApi->IMUSensorsSetImuConfigPut");

            var localVarPath = "/IMU_sensors/set_imu_config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (compassEnabled != null) localVarQueryParams.Add("compass_enabled", Configuration.ApiClient.ParameterToString(compassEnabled)); // query parameter
            if (gyroEnabled != null) localVarQueryParams.Add("gyro_enabled", Configuration.ApiClient.ParameterToString(gyroEnabled)); // query parameter
            if (accelEnabled != null) localVarQueryParams.Add("accel_enabled", Configuration.ApiClient.ParameterToString(accelEnabled)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsSetImuConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (decimal?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
            
        }

        /// <summary>
        /// Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compassEnabled">Whether or not the compass should be enabled.</param>
        /// <param name="gyroEnabled">Whether or not the gyroscope should be enabled.</param>
        /// <param name="accelEnabled">Whether or not the accelerometer should be enabled.</param>
        /// <returns>Task of decimal?</returns>
        public async System.Threading.Tasks.Task<decimal?> IMUSensorsSetImuConfigPutAsync (bool? compassEnabled, bool? gyroEnabled, bool? accelEnabled)
        {
             ApiResponse<decimal?> localVarResponse = await IMUSensorsSetImuConfigPutAsyncWithHttpInfo(compassEnabled, gyroEnabled, accelEnabled);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions below.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compassEnabled">Whether or not the compass should be enabled.</param>
        /// <param name="gyroEnabled">Whether or not the gyroscope should be enabled.</param>
        /// <param name="accelEnabled">Whether or not the accelerometer should be enabled.</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal?>> IMUSensorsSetImuConfigPutAsyncWithHttpInfo (bool? compassEnabled, bool? gyroEnabled, bool? accelEnabled)
        {
            // verify the required parameter 'compassEnabled' is set
            if (compassEnabled == null)
                throw new ApiException(400, "Missing required parameter 'compassEnabled' when calling InertialMeasurementUnitSensorIMUApi->IMUSensorsSetImuConfigPut");
            // verify the required parameter 'gyroEnabled' is set
            if (gyroEnabled == null)
                throw new ApiException(400, "Missing required parameter 'gyroEnabled' when calling InertialMeasurementUnitSensorIMUApi->IMUSensorsSetImuConfigPut");
            // verify the required parameter 'accelEnabled' is set
            if (accelEnabled == null)
                throw new ApiException(400, "Missing required parameter 'accelEnabled' when calling InertialMeasurementUnitSensorIMUApi->IMUSensorsSetImuConfigPut");

            var localVarPath = "/IMU_sensors/set_imu_config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (compassEnabled != null) localVarQueryParams.Add("compass_enabled", Configuration.ApiClient.ParameterToString(compassEnabled)); // query parameter
            if (gyroEnabled != null) localVarQueryParams.Add("gyro_enabled", Configuration.ApiClient.ParameterToString(gyroEnabled)); // query parameter
            if (accelEnabled != null) localVarQueryParams.Add("accel_enabled", Configuration.ApiClient.ParameterToString(accelEnabled)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IMUSensorsSetImuConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (decimal?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
            
        }

    }
}
