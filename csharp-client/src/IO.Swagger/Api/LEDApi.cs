/* 
 * Sense HAT API
 *
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILEDApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sets the entire LED matrix to a single colour, defaults to blank / off. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="colour">An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0). (optional)</param>
        /// <returns></returns>
        void LEDMatrixClearPut (Colour colour = null);

        /// <summary>
        /// Sets the entire LED matrix to a single colour, defaults to blank / off. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="colour">An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LEDMatrixClearPutWithHttpInfo (Colour colour = null);
        /// <summary>
        /// Flips the image on the LED matrix horizontally. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>List&lt;Colour&gt;</returns>
        List<Colour> LEDMatrixFlipHPut (bool? redraw = null);

        /// <summary>
        /// Flips the image on the LED matrix horizontally. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;Colour&gt;</returns>
        ApiResponse<List<Colour>> LEDMatrixFlipHPutWithHttpInfo (bool? redraw = null);
        /// <summary>
        /// Flips the image on the LED matrix vertically. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>List&lt;Colour&gt;</returns>
        List<Colour> LEDMatrixFlipVPut (bool? redraw = null);

        /// <summary>
        /// Flips the image on the LED matrix vertically. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;Colour&gt;</returns>
        ApiResponse<List<Colour>> LEDMatrixFlipVPutWithHttpInfo (bool? redraw = null);
        /// <summary>
        /// Gets an individual LED matrix pixel at the specified X-Y coordinate. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x">0 is on the left, 7 on the right.</param>
        /// <param name="y">0 is at the top, 7 at the bottom.</param>
        /// <returns>Colour</returns>
        Colour LEDMatrixGetPixelGet (int? x, int? y);

        /// <summary>
        /// Gets an individual LED matrix pixel at the specified X-Y coordinate. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x">0 is on the left, 7 on the right.</param>
        /// <param name="y">0 is at the top, 7 at the bottom.</param>
        /// <returns>ApiResponse of Colour</returns>
        ApiResponse<Colour> LEDMatrixGetPixelGetWithHttpInfo (int? x, int? y);
        /// <summary>
        /// Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Colour&gt;</returns>
        List<Colour> LEDMatrixGetPixelsGet ();

        /// <summary>
        /// Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Colour&gt;</returns>
        ApiResponse<List<Colour>> LEDMatrixGetPixelsGetWithHttpInfo ();
        /// <summary>
        /// Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.</param>
        /// <returns></returns>
        void LEDMatrixLowLightPut (bool? value);

        /// <summary>
        /// Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LEDMatrixLowLightPutWithHttpInfo (bool? value);
        /// <summary>
        /// Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixel">A pixel.</param>
        /// <returns></returns>
        void LEDMatrixSetPixelPut (Pixel pixel);

        /// <summary>
        /// Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixel">A pixel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LEDMatrixSetPixelPutWithHttpInfo (Pixel pixel);
        /// <summary>
        /// Updates the entire LED matrix based on a 64 length list of pixel values. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixelList">A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.</param>
        /// <returns>List&lt;Pixel&gt;</returns>
        List<Pixel> LEDMatrixSetPixelsPut (List<Pixel> pixelList);

        /// <summary>
        /// Updates the entire LED matrix based on a 64 length list of pixel values. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixelList">A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.</param>
        /// <returns>ApiResponse of List&lt;Pixel&gt;</returns>
        ApiResponse<List<Pixel>> LEDMatrixSetPixelsPutWithHttpInfo (List<Pixel> pixelList);
        /// <summary>
        /// If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.</param>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns></returns>
        void LEDMatrixSetRotationPut (decimal? r, bool? redraw = null);

        /// <summary>
        /// If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.</param>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LEDMatrixSetRotationPutWithHttpInfo (decimal? r, bool? redraw = null);
        /// <summary>
        /// Displays a single text character on the LED matrix. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s">The letter to show.</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns></returns>
        void LEDMatrixShowLetterPut (string s, List<Colour> colours = null);

        /// <summary>
        /// Displays a single text character on the LED matrix. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s">The letter to show.</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LEDMatrixShowLetterPutWithHttpInfo (string s, List<Colour> colours = null);
        /// <summary>
        /// Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textString">The message to scroll.</param>
        /// <param name="scrollSpeed">The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (optional, default to 0.1)</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns></returns>
        void LEDMatrixShowMessagePut (string textString, float? scrollSpeed = null, List<Colour> colours = null);

        /// <summary>
        /// Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textString">The message to scroll.</param>
        /// <param name="scrollSpeed">The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (optional, default to 0.1)</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LEDMatrixShowMessagePutWithHttpInfo (string textString, float? scrollSpeed = null, List<Colour> colours = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Sets the entire LED matrix to a single colour, defaults to blank / off. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="colour">An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0). (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LEDMatrixClearPutAsync (Colour colour = null);

        /// <summary>
        /// Sets the entire LED matrix to a single colour, defaults to blank / off. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="colour">An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixClearPutAsyncWithHttpInfo (Colour colour = null);
        /// <summary>
        /// Flips the image on the LED matrix horizontally. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of List&lt;Colour&gt;</returns>
        System.Threading.Tasks.Task<List<Colour>> LEDMatrixFlipHPutAsync (bool? redraw = null);

        /// <summary>
        /// Flips the image on the LED matrix horizontally. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;Colour&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Colour>>> LEDMatrixFlipHPutAsyncWithHttpInfo (bool? redraw = null);
        /// <summary>
        /// Flips the image on the LED matrix vertically. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of List&lt;Colour&gt;</returns>
        System.Threading.Tasks.Task<List<Colour>> LEDMatrixFlipVPutAsync (bool? redraw = null);

        /// <summary>
        /// Flips the image on the LED matrix vertically. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;Colour&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Colour>>> LEDMatrixFlipVPutAsyncWithHttpInfo (bool? redraw = null);
        /// <summary>
        /// Gets an individual LED matrix pixel at the specified X-Y coordinate. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x">0 is on the left, 7 on the right.</param>
        /// <param name="y">0 is at the top, 7 at the bottom.</param>
        /// <returns>Task of Colour</returns>
        System.Threading.Tasks.Task<Colour> LEDMatrixGetPixelGetAsync (int? x, int? y);

        /// <summary>
        /// Gets an individual LED matrix pixel at the specified X-Y coordinate. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x">0 is on the left, 7 on the right.</param>
        /// <param name="y">0 is at the top, 7 at the bottom.</param>
        /// <returns>Task of ApiResponse (Colour)</returns>
        System.Threading.Tasks.Task<ApiResponse<Colour>> LEDMatrixGetPixelGetAsyncWithHttpInfo (int? x, int? y);
        /// <summary>
        /// Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Colour&gt;</returns>
        System.Threading.Tasks.Task<List<Colour>> LEDMatrixGetPixelsGetAsync ();

        /// <summary>
        /// Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Colour&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Colour>>> LEDMatrixGetPixelsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LEDMatrixLowLightPutAsync (bool? value);

        /// <summary>
        /// Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixLowLightPutAsyncWithHttpInfo (bool? value);
        /// <summary>
        /// Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixel">A pixel.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LEDMatrixSetPixelPutAsync (Pixel pixel);

        /// <summary>
        /// Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixel">A pixel.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixSetPixelPutAsyncWithHttpInfo (Pixel pixel);
        /// <summary>
        /// Updates the entire LED matrix based on a 64 length list of pixel values. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixelList">A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.</param>
        /// <returns>Task of List&lt;Pixel&gt;</returns>
        System.Threading.Tasks.Task<List<Pixel>> LEDMatrixSetPixelsPutAsync (List<Pixel> pixelList);

        /// <summary>
        /// Updates the entire LED matrix based on a 64 length list of pixel values. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixelList">A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.</param>
        /// <returns>Task of ApiResponse (List&lt;Pixel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Pixel>>> LEDMatrixSetPixelsPutAsyncWithHttpInfo (List<Pixel> pixelList);
        /// <summary>
        /// If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.</param>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LEDMatrixSetRotationPutAsync (decimal? r, bool? redraw = null);

        /// <summary>
        /// If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.</param>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixSetRotationPutAsyncWithHttpInfo (decimal? r, bool? redraw = null);
        /// <summary>
        /// Displays a single text character on the LED matrix. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s">The letter to show.</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LEDMatrixShowLetterPutAsync (string s, List<Colour> colours = null);

        /// <summary>
        /// Displays a single text character on the LED matrix. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s">The letter to show.</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixShowLetterPutAsyncWithHttpInfo (string s, List<Colour> colours = null);
        /// <summary>
        /// Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textString">The message to scroll.</param>
        /// <param name="scrollSpeed">The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (optional, default to 0.1)</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LEDMatrixShowMessagePutAsync (string textString, float? scrollSpeed = null, List<Colour> colours = null);

        /// <summary>
        /// Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textString">The message to scroll.</param>
        /// <param name="scrollSpeed">The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (optional, default to 0.1)</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixShowMessagePutAsyncWithHttpInfo (string textString, float? scrollSpeed = null, List<Colour> colours = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LEDApi : ILEDApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LEDApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LEDApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LEDApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LEDApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Sets the entire LED matrix to a single colour, defaults to blank / off.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="colour">An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0). (optional)</param>
        /// <returns></returns>
        public void LEDMatrixClearPut (Colour colour = null)
        {
             LEDMatrixClearPutWithHttpInfo(colour);
        }

        /// <summary>
        /// Sets the entire LED matrix to a single colour, defaults to blank / off.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="colour">An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LEDMatrixClearPutWithHttpInfo (Colour colour = null)
        {

            var localVarPath = "/LED_Matrix/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (colour != null && colour.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colour); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colour; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixClearPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the entire LED matrix to a single colour, defaults to blank / off.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="colour">An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0). (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LEDMatrixClearPutAsync (Colour colour = null)
        {
             await LEDMatrixClearPutAsyncWithHttpInfo(colour);

        }

        /// <summary>
        /// Sets the entire LED matrix to a single colour, defaults to blank / off.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="colour">An object containing the RGB (red, green, blue) values of the colour. Each element must be an integer between 0 and 255. Defaults to (0, 0, 0). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixClearPutAsyncWithHttpInfo (Colour colour = null)
        {

            var localVarPath = "/LED_Matrix/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (colour != null && colour.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colour); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colour; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixClearPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Flips the image on the LED matrix horizontally.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>List&lt;Colour&gt;</returns>
        public List<Colour> LEDMatrixFlipHPut (bool? redraw = null)
        {
             ApiResponse<List<Colour>> localVarResponse = LEDMatrixFlipHPutWithHttpInfo(redraw);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Flips the image on the LED matrix horizontally.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;Colour&gt;</returns>
        public ApiResponse< List<Colour> > LEDMatrixFlipHPutWithHttpInfo (bool? redraw = null)
        {

            var localVarPath = "/LED_Matrix/flip_h";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (redraw != null) localVarQueryParams.Add("redraw", Configuration.ApiClient.ParameterToString(redraw)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixFlipHPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Colour>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Colour>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Colour>)));
            
        }

        /// <summary>
        /// Flips the image on the LED matrix horizontally.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of List&lt;Colour&gt;</returns>
        public async System.Threading.Tasks.Task<List<Colour>> LEDMatrixFlipHPutAsync (bool? redraw = null)
        {
             ApiResponse<List<Colour>> localVarResponse = await LEDMatrixFlipHPutAsyncWithHttpInfo(redraw);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Flips the image on the LED matrix horizontally.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;Colour&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Colour>>> LEDMatrixFlipHPutAsyncWithHttpInfo (bool? redraw = null)
        {

            var localVarPath = "/LED_Matrix/flip_h";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (redraw != null) localVarQueryParams.Add("redraw", Configuration.ApiClient.ParameterToString(redraw)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixFlipHPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Colour>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Colour>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Colour>)));
            
        }

        /// <summary>
        /// Flips the image on the LED matrix vertically.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>List&lt;Colour&gt;</returns>
        public List<Colour> LEDMatrixFlipVPut (bool? redraw = null)
        {
             ApiResponse<List<Colour>> localVarResponse = LEDMatrixFlipVPutWithHttpInfo(redraw);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Flips the image on the LED matrix vertically.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;Colour&gt;</returns>
        public ApiResponse< List<Colour> > LEDMatrixFlipVPutWithHttpInfo (bool? redraw = null)
        {

            var localVarPath = "/LED_Matrix/flip_v";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (redraw != null) localVarQueryParams.Add("redraw", Configuration.ApiClient.ParameterToString(redraw)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixFlipVPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Colour>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Colour>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Colour>)));
            
        }

        /// <summary>
        /// Flips the image on the LED matrix vertically.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of List&lt;Colour&gt;</returns>
        public async System.Threading.Tasks.Task<List<Colour>> LEDMatrixFlipVPutAsync (bool? redraw = null)
        {
             ApiResponse<List<Colour>> localVarResponse = await LEDMatrixFlipVPutAsyncWithHttpInfo(redraw);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Flips the image on the LED matrix vertically.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;Colour&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Colour>>> LEDMatrixFlipVPutAsyncWithHttpInfo (bool? redraw = null)
        {

            var localVarPath = "/LED_Matrix/flip_v";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (redraw != null) localVarQueryParams.Add("redraw", Configuration.ApiClient.ParameterToString(redraw)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixFlipVPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Colour>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Colour>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Colour>)));
            
        }

        /// <summary>
        /// Gets an individual LED matrix pixel at the specified X-Y coordinate.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x">0 is on the left, 7 on the right.</param>
        /// <param name="y">0 is at the top, 7 at the bottom.</param>
        /// <returns>Colour</returns>
        public Colour LEDMatrixGetPixelGet (int? x, int? y)
        {
             ApiResponse<Colour> localVarResponse = LEDMatrixGetPixelGetWithHttpInfo(x, y);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an individual LED matrix pixel at the specified X-Y coordinate.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x">0 is on the left, 7 on the right.</param>
        /// <param name="y">0 is at the top, 7 at the bottom.</param>
        /// <returns>ApiResponse of Colour</returns>
        public ApiResponse< Colour > LEDMatrixGetPixelGetWithHttpInfo (int? x, int? y)
        {
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling LEDApi->LEDMatrixGetPixelGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling LEDApi->LEDMatrixGetPixelGet");

            var localVarPath = "/LED_Matrix/get_pixel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (x != null) localVarQueryParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // query parameter
            if (y != null) localVarQueryParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixGetPixelGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Colour>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Colour) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Colour)));
            
        }

        /// <summary>
        /// Gets an individual LED matrix pixel at the specified X-Y coordinate.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x">0 is on the left, 7 on the right.</param>
        /// <param name="y">0 is at the top, 7 at the bottom.</param>
        /// <returns>Task of Colour</returns>
        public async System.Threading.Tasks.Task<Colour> LEDMatrixGetPixelGetAsync (int? x, int? y)
        {
             ApiResponse<Colour> localVarResponse = await LEDMatrixGetPixelGetAsyncWithHttpInfo(x, y);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an individual LED matrix pixel at the specified X-Y coordinate.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x">0 is on the left, 7 on the right.</param>
        /// <param name="y">0 is at the top, 7 at the bottom.</param>
        /// <returns>Task of ApiResponse (Colour)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Colour>> LEDMatrixGetPixelGetAsyncWithHttpInfo (int? x, int? y)
        {
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling LEDApi->LEDMatrixGetPixelGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling LEDApi->LEDMatrixGetPixelGet");

            var localVarPath = "/LED_Matrix/get_pixel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (x != null) localVarQueryParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // query parameter
            if (y != null) localVarQueryParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixGetPixelGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Colour>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Colour) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Colour)));
            
        }

        /// <summary>
        /// Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Colour&gt;</returns>
        public List<Colour> LEDMatrixGetPixelsGet ()
        {
             ApiResponse<List<Colour>> localVarResponse = LEDMatrixGetPixelsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Colour&gt;</returns>
        public ApiResponse< List<Colour> > LEDMatrixGetPixelsGetWithHttpInfo ()
        {

            var localVarPath = "/LED_Matrix/get_pixels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixGetPixelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Colour>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Colour>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Colour>)));
            
        }

        /// <summary>
        /// Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Colour&gt;</returns>
        public async System.Threading.Tasks.Task<List<Colour>> LEDMatrixGetPixelsGetAsync ()
        {
             ApiResponse<List<Colour>> localVarResponse = await LEDMatrixGetPixelsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list containing 64 smaller lists of [R, G, B] pixels (red, green, blue) representing the currently displayed image. Note: You will notice that the pixel values you pass into set_pixels sometimes change when you read them back with  get_pixels. This is because we specify each pixel element as 8 bit numbers (0 to 255) but when they&#39;re passed into the Linux frame buffer for the LED matrix the numbers are bit shifted down to fit into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The loss of binary precision when performing this conversion (3 bits lost for red, 2 for green and 3 for blue) accounts for the discrepancies you see. The get_pixels function provides a correct representation of how the pixels end up in frame buffer memory after you&#39;ve called set_pixels.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Colour&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Colour>>> LEDMatrixGetPixelsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/LED_Matrix/get_pixels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixGetPixelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Colour>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Colour>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Colour>)));
            
        }

        /// <summary>
        /// Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.</param>
        /// <returns></returns>
        public void LEDMatrixLowLightPut (bool? value)
        {
             LEDMatrixLowLightPutWithHttpInfo(value);
        }

        /// <summary>
        /// Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LEDMatrixLowLightPutWithHttpInfo (bool? value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling LEDApi->LEDMatrixLowLightPut");

            var localVarPath = "/LED_Matrix/low_light";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixLowLightPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LEDMatrixLowLightPutAsync (bool? value)
        {
             await LEDMatrixLowLightPutAsyncWithHttpInfo(value);

        }

        /// <summary>
        /// Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixLowLightPutAsyncWithHttpInfo (bool? value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling LEDApi->LEDMatrixLowLightPut");

            var localVarPath = "/LED_Matrix/low_light";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixLowLightPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixel">A pixel.</param>
        /// <returns></returns>
        public void LEDMatrixSetPixelPut (Pixel pixel)
        {
             LEDMatrixSetPixelPutWithHttpInfo(pixel);
        }

        /// <summary>
        /// Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixel">A pixel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LEDMatrixSetPixelPutWithHttpInfo (Pixel pixel)
        {
            // verify the required parameter 'pixel' is set
            if (pixel == null)
                throw new ApiException(400, "Missing required parameter 'pixel' when calling LEDApi->LEDMatrixSetPixelPut");

            var localVarPath = "/LED_Matrix/set_pixel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pixel != null && pixel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pixel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pixel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixSetPixelPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixel">A pixel.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LEDMatrixSetPixelPutAsync (Pixel pixel)
        {
             await LEDMatrixSetPixelPutAsyncWithHttpInfo(pixel);

        }

        /// <summary>
        /// Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixel">A pixel.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixSetPixelPutAsyncWithHttpInfo (Pixel pixel)
        {
            // verify the required parameter 'pixel' is set
            if (pixel == null)
                throw new ApiException(400, "Missing required parameter 'pixel' when calling LEDApi->LEDMatrixSetPixelPut");

            var localVarPath = "/LED_Matrix/set_pixel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pixel != null && pixel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pixel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pixel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixSetPixelPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the entire LED matrix based on a 64 length list of pixel values.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixelList">A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.</param>
        /// <returns>List&lt;Pixel&gt;</returns>
        public List<Pixel> LEDMatrixSetPixelsPut (List<Pixel> pixelList)
        {
             ApiResponse<List<Pixel>> localVarResponse = LEDMatrixSetPixelsPutWithHttpInfo(pixelList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the entire LED matrix based on a 64 length list of pixel values.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixelList">A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.</param>
        /// <returns>ApiResponse of List&lt;Pixel&gt;</returns>
        public ApiResponse< List<Pixel> > LEDMatrixSetPixelsPutWithHttpInfo (List<Pixel> pixelList)
        {
            // verify the required parameter 'pixelList' is set
            if (pixelList == null)
                throw new ApiException(400, "Missing required parameter 'pixelList' when calling LEDApi->LEDMatrixSetPixelsPut");

            var localVarPath = "/LED_Matrix/set_pixels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pixelList != null && pixelList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pixelList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pixelList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixSetPixelsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Pixel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Pixel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Pixel>)));
            
        }

        /// <summary>
        /// Updates the entire LED matrix based on a 64 length list of pixel values.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixelList">A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.</param>
        /// <returns>Task of List&lt;Pixel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Pixel>> LEDMatrixSetPixelsPutAsync (List<Pixel> pixelList)
        {
             ApiResponse<List<Pixel>> localVarResponse = await LEDMatrixSetPixelsPutAsyncWithHttpInfo(pixelList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the entire LED matrix based on a 64 length list of pixel values.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pixelList">A list containing 64 pixels. Each R-G-B element must be an integer between 0 and 255.</param>
        /// <returns>Task of ApiResponse (List&lt;Pixel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Pixel>>> LEDMatrixSetPixelsPutAsyncWithHttpInfo (List<Pixel> pixelList)
        {
            // verify the required parameter 'pixelList' is set
            if (pixelList == null)
                throw new ApiException(400, "Missing required parameter 'pixelList' when calling LEDApi->LEDMatrixSetPixelsPut");

            var localVarPath = "/LED_Matrix/set_pixels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pixelList != null && pixelList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pixelList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pixelList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixSetPixelsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Pixel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Pixel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Pixel>)));
            
        }

        /// <summary>
        /// If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.</param>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns></returns>
        public void LEDMatrixSetRotationPut (decimal? r, bool? redraw = null)
        {
             LEDMatrixSetRotationPutWithHttpInfo(r, redraw);
        }

        /// <summary>
        /// If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.</param>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LEDMatrixSetRotationPutWithHttpInfo (decimal? r, bool? redraw = null)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling LEDApi->LEDMatrixSetRotationPut");

            var localVarPath = "/LED_Matrix/set_rotation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (r != null) localVarQueryParams.Add("r", Configuration.ApiClient.ParameterToString(r)); // query parameter
            if (redraw != null) localVarQueryParams.Add("redraw", Configuration.ApiClient.ParameterToString(redraw)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixSetRotationPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.</param>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LEDMatrixSetRotationPutAsync (decimal? r, bool? redraw = null)
        {
             await LEDMatrixSetRotationPutAsyncWithHttpInfo(r, redraw);

        }

        /// <summary>
        /// If you&#39;re using the Pi upside down or sideways you can use this function to correct the orientation of the image being shown.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">The angle to rotate the LED matrix though. 0 is with the Raspberry Pi HDMI port facing downwards.</param>
        /// <param name="redraw">Whether or not to redraw what is already being displayed on the LED matrix. Defaults to True (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixSetRotationPutAsyncWithHttpInfo (decimal? r, bool? redraw = null)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling LEDApi->LEDMatrixSetRotationPut");

            var localVarPath = "/LED_Matrix/set_rotation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (r != null) localVarQueryParams.Add("r", Configuration.ApiClient.ParameterToString(r)); // query parameter
            if (redraw != null) localVarQueryParams.Add("redraw", Configuration.ApiClient.ParameterToString(redraw)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixSetRotationPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Displays a single text character on the LED matrix.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s">The letter to show.</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns></returns>
        public void LEDMatrixShowLetterPut (string s, List<Colour> colours = null)
        {
             LEDMatrixShowLetterPutWithHttpInfo(s, colours);
        }

        /// <summary>
        /// Displays a single text character on the LED matrix.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s">The letter to show.</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LEDMatrixShowLetterPutWithHttpInfo (string s, List<Colour> colours = null)
        {
            // verify the required parameter 's' is set
            if (s == null)
                throw new ApiException(400, "Missing required parameter 's' when calling LEDApi->LEDMatrixShowLetterPut");

            var localVarPath = "/LED_Matrix/show_letter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (s != null) localVarQueryParams.Add("s", Configuration.ApiClient.ParameterToString(s)); // query parameter
            if (colours != null && colours.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colours); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colours; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixShowLetterPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Displays a single text character on the LED matrix.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s">The letter to show.</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LEDMatrixShowLetterPutAsync (string s, List<Colour> colours = null)
        {
             await LEDMatrixShowLetterPutAsyncWithHttpInfo(s, colours);

        }

        /// <summary>
        /// Displays a single text character on the LED matrix.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s">The letter to show.</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixShowLetterPutAsyncWithHttpInfo (string s, List<Colour> colours = null)
        {
            // verify the required parameter 's' is set
            if (s == null)
                throw new ApiException(400, "Missing required parameter 's' when calling LEDApi->LEDMatrixShowLetterPut");

            var localVarPath = "/LED_Matrix/show_letter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (s != null) localVarQueryParams.Add("s", Configuration.ApiClient.ParameterToString(s)); // query parameter
            if (colours != null && colours.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colours); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colours; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixShowLetterPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textString">The message to scroll.</param>
        /// <param name="scrollSpeed">The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (optional, default to 0.1)</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns></returns>
        public void LEDMatrixShowMessagePut (string textString, float? scrollSpeed = null, List<Colour> colours = null)
        {
             LEDMatrixShowMessagePutWithHttpInfo(textString, scrollSpeed, colours);
        }

        /// <summary>
        /// Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textString">The message to scroll.</param>
        /// <param name="scrollSpeed">The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (optional, default to 0.1)</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LEDMatrixShowMessagePutWithHttpInfo (string textString, float? scrollSpeed = null, List<Colour> colours = null)
        {
            // verify the required parameter 'textString' is set
            if (textString == null)
                throw new ApiException(400, "Missing required parameter 'textString' when calling LEDApi->LEDMatrixShowMessagePut");

            var localVarPath = "/LED_Matrix/show_message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (textString != null) localVarQueryParams.Add("text_string", Configuration.ApiClient.ParameterToString(textString)); // query parameter
            if (scrollSpeed != null) localVarQueryParams.Add("scroll_speed", Configuration.ApiClient.ParameterToString(scrollSpeed)); // query parameter
            if (colours != null && colours.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colours); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colours; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixShowMessagePut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textString">The message to scroll.</param>
        /// <param name="scrollSpeed">The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (optional, default to 0.1)</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LEDMatrixShowMessagePutAsync (string textString, float? scrollSpeed = null, List<Colour> colours = null)
        {
             await LEDMatrixShowMessagePutAsyncWithHttpInfo(textString, scrollSpeed, colours);

        }

        /// <summary>
        /// Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textString">The message to scroll.</param>
        /// <param name="scrollSpeed">The speed at which the text should scroll. This value represents the time paused for between shifting the text to the left by one column of pixels. Defaults to 0.1 (optional, default to 0.1)</param>
        /// <param name="colours">An array of 2 colours (text colour and background colour). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LEDMatrixShowMessagePutAsyncWithHttpInfo (string textString, float? scrollSpeed = null, List<Colour> colours = null)
        {
            // verify the required parameter 'textString' is set
            if (textString == null)
                throw new ApiException(400, "Missing required parameter 'textString' when calling LEDApi->LEDMatrixShowMessagePut");

            var localVarPath = "/LED_Matrix/show_message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (textString != null) localVarQueryParams.Add("text_string", Configuration.ApiClient.ParameterToString(textString)); // query parameter
            if (scrollSpeed != null) localVarQueryParams.Add("scroll_speed", Configuration.ApiClient.ParameterToString(scrollSpeed)); // query parameter
            if (colours != null && colours.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colours); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colours; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LEDMatrixShowMessagePut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
