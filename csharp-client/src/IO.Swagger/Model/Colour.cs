/* 
 * Sense HAT API
 *
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Colour
    /// </summary>
    [DataContract]
    public partial class Colour :  IEquatable<Colour>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Colour" /> class.
        /// </summary>
        /// <param name="Red">The Red element of the colour..</param>
        /// <param name="Green">The Green element of the colour..</param>
        /// <param name="Blue">The Blue element of the colour..</param>
        public Colour(int? Red = default(int?), int? Green = default(int?), int? Blue = default(int?))
        {
            this.Red = Red;
            this.Green = Green;
            this.Blue = Blue;
        }
        
        /// <summary>
        /// The Red element of the colour.
        /// </summary>
        /// <value>The Red element of the colour.</value>
        [DataMember(Name="red", EmitDefaultValue=false)]
        public int? Red { get; set; }
        /// <summary>
        /// The Green element of the colour.
        /// </summary>
        /// <value>The Green element of the colour.</value>
        [DataMember(Name="green", EmitDefaultValue=false)]
        public int? Green { get; set; }
        /// <summary>
        /// The Blue element of the colour.
        /// </summary>
        /// <value>The Blue element of the colour.</value>
        [DataMember(Name="blue", EmitDefaultValue=false)]
        public int? Blue { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Colour {\n");
            sb.Append("  Red: ").Append(Red).Append("\n");
            sb.Append("  Green: ").Append(Green).Append("\n");
            sb.Append("  Blue: ").Append(Blue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Colour);
        }

        /// <summary>
        /// Returns true if Colour instances are equal
        /// </summary>
        /// <param name="other">Instance of Colour to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Colour other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Red == other.Red ||
                    this.Red != null &&
                    this.Red.Equals(other.Red)
                ) && 
                (
                    this.Green == other.Green ||
                    this.Green != null &&
                    this.Green.Equals(other.Green)
                ) && 
                (
                    this.Blue == other.Blue ||
                    this.Blue != null &&
                    this.Blue.Equals(other.Blue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Red != null)
                    hash = hash * 59 + this.Red.GetHashCode();
                if (this.Green != null)
                    hash = hash * 59 + this.Green.GetHashCode();
                if (this.Blue != null)
                    hash = hash * 59 + this.Blue.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
