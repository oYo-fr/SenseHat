/* 
 * Sense HAT API
 *
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Orientation
    /// </summary>
    [DataContract]
    public partial class Orientation :  IEquatable<Orientation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Orientation" /> class.
        /// </summary>
        /// <param name="Pitch">The pitch..</param>
        /// <param name="Roll">The roll..</param>
        /// <param name="Yaw">The yaw..</param>
        public Orientation(decimal? Pitch = default(decimal?), decimal? Roll = default(decimal?), decimal? Yaw = default(decimal?))
        {
            this.Pitch = Pitch;
            this.Roll = Roll;
            this.Yaw = Yaw;
        }
        
        /// <summary>
        /// The pitch.
        /// </summary>
        /// <value>The pitch.</value>
        [DataMember(Name="pitch", EmitDefaultValue=false)]
        public decimal? Pitch { get; set; }
        /// <summary>
        /// The roll.
        /// </summary>
        /// <value>The roll.</value>
        [DataMember(Name="roll", EmitDefaultValue=false)]
        public decimal? Roll { get; set; }
        /// <summary>
        /// The yaw.
        /// </summary>
        /// <value>The yaw.</value>
        [DataMember(Name="yaw", EmitDefaultValue=false)]
        public decimal? Yaw { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Orientation {\n");
            sb.Append("  Pitch: ").Append(Pitch).Append("\n");
            sb.Append("  Roll: ").Append(Roll).Append("\n");
            sb.Append("  Yaw: ").Append(Yaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Orientation);
        }

        /// <summary>
        /// Returns true if Orientation instances are equal
        /// </summary>
        /// <param name="other">Instance of Orientation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Orientation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Pitch == other.Pitch ||
                    this.Pitch != null &&
                    this.Pitch.Equals(other.Pitch)
                ) && 
                (
                    this.Roll == other.Roll ||
                    this.Roll != null &&
                    this.Roll.Equals(other.Roll)
                ) && 
                (
                    this.Yaw == other.Yaw ||
                    this.Yaw != null &&
                    this.Yaw.Equals(other.Yaw)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Pitch != null)
                    hash = hash * 59 + this.Pitch.GetHashCode();
                if (this.Roll != null)
                    hash = hash * 59 + this.Roll.GetHashCode();
                if (this.Yaw != null)
                    hash = hash * 59 + this.Yaw.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
