/* 
 * Sense HAT API
 *
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Pixel
    /// </summary>
    [DataContract]
    public partial class Pixel :  IEquatable<Pixel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pixel" /> class.
        /// </summary>
        /// <param name="X">0 is on the left, 7 on the right..</param>
        /// <param name="Y">0 is at the top, 7 at the bottom..</param>
        /// <param name="Colour">Colour.</param>
        public Pixel(int? X = default(int?), int? Y = default(int?), Colour Colour = default(Colour))
        {
            this.X = X;
            this.Y = Y;
            this.Colour = Colour;
        }
        
        /// <summary>
        /// 0 is on the left, 7 on the right.
        /// </summary>
        /// <value>0 is on the left, 7 on the right.</value>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public int? X { get; set; }
        /// <summary>
        /// 0 is at the top, 7 at the bottom.
        /// </summary>
        /// <value>0 is at the top, 7 at the bottom.</value>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public int? Y { get; set; }
        /// <summary>
        /// Gets or Sets Colour
        /// </summary>
        [DataMember(Name="colour", EmitDefaultValue=false)]
        public Colour Colour { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pixel {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Colour: ").Append(Colour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Pixel);
        }

        /// <summary>
        /// Returns true if Pixel instances are equal
        /// </summary>
        /// <param name="other">Instance of Pixel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pixel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.X == other.X ||
                    this.X != null &&
                    this.X.Equals(other.X)
                ) && 
                (
                    this.Y == other.Y ||
                    this.Y != null &&
                    this.Y.Equals(other.Y)
                ) && 
                (
                    this.Colour == other.Colour ||
                    this.Colour != null &&
                    this.Colour.Equals(other.Colour)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.X != null)
                    hash = hash * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hash = hash * 59 + this.Y.GetHashCode();
                if (this.Colour != null)
                    hash = hash * 59 + this.Colour.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
