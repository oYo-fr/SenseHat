/* 
 * Sense HAT API
 *
 * Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing InertialMeasurementUnitSensorIMUApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InertialMeasurementUnitSensorIMUApiTests
    {
        private InertialMeasurementUnitSensorIMUApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InertialMeasurementUnitSensorIMUApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InertialMeasurementUnitSensorIMUApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InertialMeasurementUnitSensorIMUApi
            //Assert.IsInstanceOfType(typeof(InertialMeasurementUnitSensorIMUApi), instance, "instance is a InertialMeasurementUnitSensorIMUApi");
        }

        
        /// <summary>
        /// Test IMUSensorsGetAccelerometerGet
        /// </summary>
        [Test]
        public void IMUSensorsGetAccelerometerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetAccelerometerGet();
            //Assert.IsInstanceOf<Orientation> (response, "response is Orientation");
        }
        
        /// <summary>
        /// Test IMUSensorsGetAccelerometerRawGet
        /// </summary>
        [Test]
        public void IMUSensorsGetAccelerometerRawGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetAccelerometerRawGet();
            //Assert.IsInstanceOf<Vertice> (response, "response is Vertice");
        }
        
        /// <summary>
        /// Test IMUSensorsGetCompassGet
        /// </summary>
        [Test]
        public void IMUSensorsGetCompassGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetCompassGet();
            //Assert.IsInstanceOf<decimal?> (response, "response is decimal?");
        }
        
        /// <summary>
        /// Test IMUSensorsGetCompassRawGet
        /// </summary>
        [Test]
        public void IMUSensorsGetCompassRawGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetCompassRawGet();
            //Assert.IsInstanceOf<Vertice> (response, "response is Vertice");
        }
        
        /// <summary>
        /// Test IMUSensorsGetGyroscopeGet
        /// </summary>
        [Test]
        public void IMUSensorsGetGyroscopeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetGyroscopeGet();
            //Assert.IsInstanceOf<Orientation> (response, "response is Orientation");
        }
        
        /// <summary>
        /// Test IMUSensorsGetGyroscopeRawGet
        /// </summary>
        [Test]
        public void IMUSensorsGetGyroscopeRawGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetGyroscopeRawGet();
            //Assert.IsInstanceOf<Vertice> (response, "response is Vertice");
        }
        
        /// <summary>
        /// Test IMUSensorsGetOrientationDegreesGet
        /// </summary>
        [Test]
        public void IMUSensorsGetOrientationDegreesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetOrientationDegreesGet();
            //Assert.IsInstanceOf<Orientation> (response, "response is Orientation");
        }
        
        /// <summary>
        /// Test IMUSensorsGetOrientationGet
        /// </summary>
        [Test]
        public void IMUSensorsGetOrientationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetOrientationGet();
            //Assert.IsInstanceOf<Orientation> (response, "response is Orientation");
        }
        
        /// <summary>
        /// Test IMUSensorsGetOrientationRadiansGet
        /// </summary>
        [Test]
        public void IMUSensorsGetOrientationRadiansGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IMUSensorsGetOrientationRadiansGet();
            //Assert.IsInstanceOf<Orientation> (response, "response is Orientation");
        }
        
        /// <summary>
        /// Test IMUSensorsSetImuConfigPut
        /// </summary>
        [Test]
        public void IMUSensorsSetImuConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? compassEnabled = null;
            //bool? gyroEnabled = null;
            //bool? accelEnabled = null;
            //var response = instance.IMUSensorsSetImuConfigPut(compassEnabled, gyroEnabled, accelEnabled);
            //Assert.IsInstanceOf<decimal?> (response, "response is decimal?");
        }
        
    }

}
