---
swagger: "2.0"
info:
  description: "Sense HAT API Express wrapper (http://pythonhosted.org/sense-hat/api/#sense-hat-api-reference)."
  version: "1.0.0"
  title: "Sense HAT API"
host: "localhost"
basePath: "/v1"
schemes:
- "http"
produces:
- "application/json"
paths:
  /LED_Matrix/set_rotation:
    put:
      tags:
      - "LED"
      summary: "If you're using the Pi upside down or sideways you can use this function\
        \ to correct the orientation of the image being shown.\n"
      operationId: "lED_MatrixSet_rotationPUT"
      parameters:
      - name: "r"
        in: "query"
        description: "The angle to rotate the LED matrix though. 0 is with the Raspberry\
          \ Pi HDMI port facing downwards."
        required: true
        type: "number"
        default: 90
        multipleOf: 90
        format: "int16"
        enum:
        - 0
        - 90
        - 180
        - 270
      - name: "redraw"
        in: "query"
        description: "Whether or not to redraw what is already being displayed on\
          \ the LED matrix. Defaults to True"
        required: false
        type: "boolean"
        default: true
      responses:
        200:
          description: "No error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/flip_h:
    put:
      tags:
      - "LED"
      summary: "Flips the image on the LED matrix horizontally.\n"
      operationId: "lED_MatrixFlip_hPUT"
      parameters:
      - name: "redraw"
        in: "query"
        description: "Whether or not to redraw what is already being displayed on\
          \ the LED matrix. Defaults to True"
        required: false
        type: "boolean"
        default: true
      responses:
        200:
          description: "A list containing 64 smaller lists of [R, G, B] pixels (red,\
            \ green, blue) representing the flipped image."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Colour"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/flip_v:
    put:
      tags:
      - "LED"
      summary: "Flips the image on the LED matrix vertically.\n"
      operationId: "lED_MatrixFlip_vPUT"
      parameters:
      - name: "redraw"
        in: "query"
        description: "Whether or not to redraw what is already being displayed on\
          \ the LED matrix. Defaults to True"
        required: false
        type: "boolean"
        default: true
      responses:
        200:
          description: "A list containing 64 smaller lists of [R, G, B] pixels (red,\
            \ green, blue) representing the flipped image."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Colour"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/set_pixels:
    put:
      tags:
      - "LED"
      summary: "Updates the entire LED matrix based on a 64 length list of pixel values.\n"
      operationId: "lED_MatrixSet_pixelsPUT"
      parameters:
      - in: "body"
        name: "pixel_list"
        description: "A list containing 64 pixels. Each R-G-B element must be an integer\
          \ between 0 and 255."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Pixel"
      responses:
        200:
          description: "No error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pixel"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/get_pixels:
    get:
      tags:
      - "LED"
      summary: "Gets a list containing 64 smaller lists of [R, G, B] pixels (red,\
        \ green, blue) representing the currently displayed image.\nNote: You will\
        \ notice that the pixel values you pass into set_pixels sometimes change when\
        \ you read them back with  get_pixels. This is because we specify each pixel\
        \ element as 8 bit numbers (0 to 255) but when they're passed into the Linux\
        \ frame buffer for the LED matrix the numbers are bit shifted down to fit\
        \ into RGB 565. 5 bits for red, 6 bits for green and 5 bits for blue. The\
        \ loss of binary precision when performing this conversion (3 bits lost for\
        \ red, 2 for green and 3 for blue) accounts for the discrepancies you see.\n\
        The get_pixels function provides a correct representation of how the pixels\
        \ end up in frame buffer memory after you've called set_pixels.\n"
      operationId: "lED_MatrixGet_pixelsGET"
      parameters: []
      responses:
        200:
          description: "A list containing 64 smaller lists of [R, G, B] pixels (red,\
            \ green, blue) representing the currently displayed image."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Colour"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/set_pixel:
    put:
      tags:
      - "LED"
      summary: "Sets an individual LED matrix pixel at the specified X-Y coordinate\
        \ to the specified colour.\n"
      operationId: "lED_MatrixSet_pixelPUT"
      parameters:
      - in: "body"
        name: "pixel"
        description: "A pixel."
        required: true
        schema:
          $ref: "#/definitions/Pixel"
      responses:
        200:
          description: "No error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/get_pixel:
    get:
      tags:
      - "LED"
      summary: "Gets an individual LED matrix pixel at the specified X-Y coordinate.\n"
      operationId: "lED_MatrixGet_pixelGET"
      parameters:
      - name: "x"
        in: "query"
        description: "0 is on the left, 7 on the right."
        required: true
        type: "integer"
        format: "int8"
      - name: "y"
        in: "query"
        description: "0 is at the top, 7 at the bottom."
        required: true
        type: "integer"
        format: "int8"
      responses:
        200:
          description: "Returns an object representing the colour of an individual\
            \ LED matrix pixel at the specified X-Y coordinate."
          schema:
            $ref: "#/definitions/Colour"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/clear:
    put:
      tags:
      - "LED"
      summary: "Sets the entire LED matrix to a single colour, defaults to blank /\
        \ off.\n"
      operationId: "lED_MatrixClearPUT"
      parameters:
      - in: "body"
        name: "colour"
        description: "An object containing the RGB (red, green, blue) values of the\
          \ colour. Each element must be an integer between 0 and 255. Defaults to\
          \ (0, 0, 0)."
        required: false
        schema:
          $ref: "#/definitions/Colour"
      responses:
        200:
          description: "No error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/show_message:
    put:
      tags:
      - "LED"
      summary: "Scrolls a text message from right to left across the LED matrix and\
        \ at the specified speed, in the specified colour and background colour.\n"
      operationId: "lED_MatrixShow_messagePUT"
      parameters:
      - name: "text_string"
        in: "query"
        description: "The message to scroll."
        required: true
        type: "string"
      - name: "scroll_speed"
        in: "query"
        description: "The speed at which the text should scroll. This value represents\
          \ the time paused for between shifting the text to the left by one column\
          \ of pixels. Defaults to 0.1"
        required: false
        type: "number"
        default: 0.1000000000000000055511151231257827021181583404541015625
        format: "float"
      - in: "body"
        name: "colours"
        description: "An array of 2 colours (text colour and background colour)."
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Colour"
      responses:
        200:
          description: "No error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/show_letter:
    put:
      tags:
      - "LED"
      summary: "Displays a single text character on the LED matrix.\n"
      operationId: "lED_MatrixShow_letterPUT"
      parameters:
      - name: "s"
        in: "query"
        description: "The letter to show."
        required: true
        type: "string"
      - in: "body"
        name: "colours"
        description: "An array of 2 colours (text colour and background colour)."
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Colour"
      responses:
        200:
          description: "No error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /LED_Matrix/low_light:
    put:
      tags:
      - "LED"
      summary: "Toggles the LED matrix low light mode, useful if the Sense HAT is\
        \ being used in a dark environment.\n"
      operationId: "lED_MatrixLow_lightPUT"
      parameters:
      - name: "value"
        in: "query"
        description: "Toggles the LED matrix low light mode, useful if the Sense HAT\
          \ is being used in a dark environment."
        required: true
        type: "boolean"
      responses:
        200:
          description: "No error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "LED"
  /Environmental_sensors/get_humidity:
    get:
      tags:
      - "Environmental sensor"
      summary: "Gets the percentage of relative humidity from the humidity sensor.\n"
      operationId: "environmental_sensorsGet_humidityGET"
      parameters: []
      responses:
        200:
          description: "The percentage of relative humidity."
          schema:
            type: "number"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EnvironmentalSensor"
  /Environmental_sensors/get_temperature:
    get:
      tags:
      - "Environmental sensor"
      summary: "Calls get_temperature_from_humidity below.\n"
      operationId: "environmental_sensorsGet_temperatureGET"
      parameters: []
      responses:
        200:
          description: "The current temperature in degrees Celsius."
          schema:
            type: "number"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EnvironmentalSensor"
  /Environmental_sensors/get_temperature_from_humidity:
    get:
      tags:
      - "Environmental sensor"
      summary: "Gets the current temperature in degrees Celsius from the humidity\
        \ sensor.\n"
      operationId: "environmental_sensorsGet_temperature_from_humidityGET"
      parameters: []
      responses:
        200:
          description: "The current temperature in degrees Celsius."
          schema:
            type: "number"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EnvironmentalSensor"
  /Environmental_sensors/get_temperature_from_pressure:
    get:
      tags:
      - "Environmental sensor"
      summary: "Gets the current temperature in degrees Celsius from the pressure\
        \ sensor.\n"
      operationId: "environmental_sensorsGet_temperature_from_pressureGET"
      parameters: []
      responses:
        200:
          description: "The current temperature in degrees Celsius."
          schema:
            type: "number"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EnvironmentalSensor"
  /Environmental_sensors/get_pressure:
    get:
      tags:
      - "Environmental sensor"
      summary: "Gets the current pressure in Millibars from the pressure sensor.\n"
      operationId: "environmental_sensorsGet_pressureGET"
      parameters: []
      responses:
        200:
          description: "The current pressure in Millibars."
          schema:
            type: "number"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EnvironmentalSensor"
  /IMU_sensors/set_imu_config:
    put:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Enables and disables the gyroscope, accelerometer and/or magnetometer\
        \ contribution to the get orientation functions below.\n"
      operationId: "iMU_sensorsSet_imu_configPUT"
      parameters:
      - name: "compass_enabled"
        in: "query"
        description: "Whether or not the compass should be enabled."
        required: true
        type: "boolean"
      - name: "gyro_enabled"
        in: "query"
        description: "Whether or not the gyroscope should be enabled."
        required: true
        type: "boolean"
      - name: "accel_enabled"
        in: "query"
        description: "Whether or not the accelerometer should be enabled."
        required: true
        type: "boolean"
      responses:
        200:
          description: "No error."
          schema:
            type: "number"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_orientation_radians:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Gets the current orientation in radians using the aircraft principal\
        \ axes of pitch, roll and yaw.\n"
      operationId: "iMU_sensorsGet_orientation_radiansGET"
      parameters: []
      responses:
        200:
          description: "A dictionary object indexed by the strings pitch, roll and\
            \ yaw. The values are Floats representing the angle of the axis in radians."
          schema:
            $ref: "#/definitions/Orientation"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_orientation_degrees:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Gets the current orientation in degrees using the aircraft principal\
        \ axes of pitch, roll and yaw.\n"
      operationId: "iMU_sensorsGet_orientation_degreesGET"
      parameters: []
      responses:
        200:
          description: "A dictionary object indexed by the strings pitch, roll and\
            \ yaw. The values are Floats representing the angle of the axis in degrees."
          schema:
            $ref: "#/definitions/Orientation"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_orientation:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Calls get_orientation_degrees above.\n"
      operationId: "iMU_sensorsGet_orientationGET"
      parameters: []
      responses:
        200:
          description: "A dictionary object indexed by the strings pitch, roll and\
            \ yaw. The values are Floats representing the angle of the axis in degrees."
          schema:
            $ref: "#/definitions/Orientation"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_compass:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Calls set_imu_config to disable the gyroscope and accelerometer then\
        \ gets the direction of North from the magnetometer in degrees.\n"
      operationId: "iMU_sensorsGet_compassGET"
      parameters: []
      responses:
        200:
          description: "The direction of North."
          schema:
            type: "number"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_compass_raw:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Gets the raw x, y and z axis magnetometer data.\n"
      operationId: "iMU_sensorsGet_compass_rawGET"
      parameters: []
      responses:
        200:
          description: "A dictionary object indexed by the strings x, y and z. The\
            \ values are Floats representing the magnetic intensity of the axis in\
            \ microteslas (µT)."
          schema:
            $ref: "#/definitions/Vertice"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_gyroscope:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Calls set_imu_config to disable the magnetometer and accelerometer\
        \ then gets the current orientation from the gyroscope only.\n"
      operationId: "iMU_sensorsGet_gyroscopeGET"
      parameters: []
      responses:
        200:
          description: "A dictionary object indexed by the strings pitch, roll and\
            \ yaw. The values are Floats representing the angle of the axis in degrees."
          schema:
            $ref: "#/definitions/Orientation"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_gyroscope_raw:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Gets the raw x, y and z axis gyroscope data.\n"
      operationId: "iMU_sensorsGet_gyroscope_rawGET"
      parameters: []
      responses:
        200:
          description: "A dictionary object indexed by the strings x, y and z. The\
            \ values are Floats representing the rotational intensity of the axis\
            \ in radians per second."
          schema:
            $ref: "#/definitions/Vertice"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_accelerometer:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Calls set_imu_config to disable the magnetometer and gyroscope then\
        \ gets the current orientation from the accelerometer only.\n"
      operationId: "iMU_sensorsGet_accelerometerGET"
      parameters: []
      responses:
        200:
          description: "A dictionary object indexed by the strings pitch, roll and\
            \ yaw. The values are Floats representing the angle of the axis in degrees."
          schema:
            $ref: "#/definitions/Orientation"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
  /IMU_sensors/get_accelerometer_raw:
    get:
      tags:
      - "inertial measurement unit sensor IMU"
      summary: "Gets the raw x, y and z axis accelerometer data.\n"
      operationId: "iMU_sensorsGet_accelerometer_rawGET"
      parameters: []
      responses:
        200:
          description: "A dictionary object indexed by the strings x, y and z. The\
            \ values are Floats representing the acceleration intensity of the axis\
            \ in Gs."
          schema:
            $ref: "#/definitions/Vertice"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "InertialMeasurementUnitSensorIMU"
definitions:
  Colour:
    type: "object"
    properties:
      red:
        type: "integer"
        format: "int8"
        description: "The Red element of the colour."
      green:
        type: "integer"
        format: "int8"
        description: "The Green element of the colour."
      blue:
        type: "integer"
        format: "int8"
        description: "The Blue element of the colour."
  Pixel:
    type: "object"
    properties:
      x:
        type: "integer"
        format: "int8"
        description: "0 is on the left, 7 on the right."
      y:
        type: "integer"
        format: "int8"
        description: "0 is at the top, 7 at the bottom."
      colour:
        $ref: "#/definitions/Colour"
  Orientation:
    type: "object"
    properties:
      pitch:
        type: "number"
        description: "The pitch."
      roll:
        type: "number"
        description: "The roll."
      yaw:
        type: "number"
        description: "The yaw."
  Vertice:
    type: "object"
    properties:
      x:
        type: "number"
        description: "The x."
      y:
        type: "number"
        description: "The y."
      z:
        type: "number"
        description: "The z."
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
